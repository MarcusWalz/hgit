HGit Version Negative One 
================================================================================
by Marcus Walz mewalz at uwm edu

This is my expiremental "pet project" which tries to reverse engineer git in Haskell. 
Currently, it is a prototype and works simply by spawning git processes in the right 
directory.

It was written during a simpler time; when I was completly unaware of
things like Parsec and Enumeratees and monadic composition. So updating
the code should be fun. 

There are dozens of modules on hackage that do the same thing, I suggest you try
those first.


The orginal code was based largely on vincenthz's
[libgit](https://github.com/vincenthz/hs-libgit/blob/master/Lib/Git/Tree.hs)

There are also LibGit2 bindings available.

Example Usage
-------------------------------------------------------------------------------
After HGit is installed. This example clones a git repository and grabs each
commit.

    $ mkdir dir
    $ ghci

    > :m +Lib.HGit Data.Text.Lazy
    > let c = makeGitConfig "dir/" Nothing
    > let url = pack "https://github.com/MarcusWalz/hgit.git"
    > runGit c $ gitClone url
    > revs <- runGit c $ revList
    > commits <- runGit c $ catObjects revs 
    > commits
